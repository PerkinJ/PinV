{"version":3,"sources":["../../../../src/components/modules/StreamGraph1/StreamGraph1.js"],"names":[],"mappings":"AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"StreamGraph1.js","sourcesContent":["// import { h, Component } from 'preact'\n// import * as d3 from 'd3'\n\n\n// class StreamGraph extends Component {\n// \tconstructor(props) {\n// \t\tsuper(props)\n// \t}\n// \tstatic defaultProps = {\n// \t\twidth: 660,\n// \t\theight: 600,\n// \t\tpadding: { top: 20, right: 20, bottom: 30, left: 50 }\n// \t}\n// \tcomponentDidMount() {\n// \t\tchart(\"../../../demo/mock/streamData.csv\", \"orange\")\n\n// \t\tlet datearray = []\n// \t\tlet colorrange = []\n\n\n// \t\tfunction chart(csvpath, color) {\n\n// \t\t\tif (color === \"blue\") {\n// \t\t\t\tcolorrange = [\"#045A8D\", \"#2B8CBE\", \"#74A9CF\", \"#A6BDDB\", \"#D0D1E6\", \"#F1EEF6\"]\n// \t\t\t}\n// \t\t\telse if (color === \"pink\") {\n// \t\t\t\tcolorrange = [\"#980043\", \"#DD1C77\", \"#DF65B0\", \"#C994C7\", \"#D4B9DA\", \"#F1EEF6\"]\n// \t\t\t}\n// \t\t\telse if (color === \"orange\") {\n// \t\t\t\tcolorrange = [\"#B30000\", \"#E34A33\", \"#FC8D59\", \"#FDBB84\", \"#FDD49E\", \"#FEF0D9\"]\n// \t\t\t}\n// \t\t\tlet strokecolor = colorrange[0]\n\n// \t\t\tlet format = d3.timeFormat(\"%m/%d/%y\")\n\n// \t\t\tlet margin = { top: 20, right: 40, bottom: 30, left: 30 }\n// \t\t\tlet width = document.body.clientWidth - margin.left - margin.right\n// \t\t\tlet height = 400 - margin.top - margin.bottom\n\n// \t\t\tlet tooltip = d3.select(\"body\")\n// \t\t\t\t.append(\"div\")\n// \t\t\t\t.attr(\"class\", \"remove\")\n// \t\t\t\t.style(\"position\", \"absolute\")\n// \t\t\t\t.style(\"z-index\", \"20\")\n// \t\t\t\t.style(\"visibility\", \"hidden\")\n// \t\t\t\t.style(\"top\", \"30px\")\n// \t\t\t\t.style(\"left\", \"55px\")\n\n// \t\t\tlet x = d3.scaleTime()\n// \t\t\t\t.range([0, width])\n\n// \t\t\tlet y = d3.scaleLinear()\n// \t\t\t\t.range([height - 10, 0])\n\n// \t\t\tlet z = d3.scaleOrdinal()\n// \t\t\t\t.range(colorrange)\n\n// \t\t\tlet xAxis = d3.axisTop()\n// \t\t\t\t.scale(x)\n// \t\t\t\t.ticks(d3.timeWeeks)\n\n// \t\t\tlet yAxis = d3.axisLeft()\n// \t\t\t\t.scale(y)\n\n// \t\t\t// let yAxisr = d3.svg.axis()\n// \t\t\t// \t.scale(y)\n\n// \t\t\t// let stack = d3.stack()\n// \t\t\t// \t.keys((d)=>d.key)\n// \t\t\t// \t.values(function (d) { return d.values })\n// \t\t\t// \t.offset(d3.stackOffsetSilhouette)\n\n// \t\t\tlet stack = d3.stack()\n// \t\t\t\t// .value(function(d) { return d.values })\n// \t\t\t\t// .x(function(d) { return d.date })\n// \t\t\t\t// .y(function(d) { return d.value })\n// \t\t\t\t.offset(d3.stackOffsetSilhouette)\n\n\n// \t\t\tlet nest = d3.nest()\n// \t\t\t\t.key(function (d) {\n// \t\t\t\t\tconsole.log(d)\n// \t\t\t\t\treturn d.key })\n\n// \t\t\tlet area = d3.area()\n// \t\t\t\t// .interpolateCardinal()\n// \t\t\t\t.x(function (d) { return x(d.date) })\n// \t\t\t\t.y0(function (d) { return y(d.y0) })\n// \t\t\t\t.y1(function (d) { return y(d.y0 + d.y) })\n\n// \t\t\tlet svg = d3.select(\".chart\").append(\"svg\")\n// \t\t\t\t.attr(\"width\", width + margin.left + margin.right)\n// \t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n// \t\t\t\t.append(\"g\")\n// \t\t\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n// \t\t\tlet graph = d3.csv(csvpath, (data) =>{\n// \t\t\t\tdata.forEach(function (d) {\n// \t\t\t\t\t// d.date =d3.timeParse(d.date)\n// \t\t\t\t\td.value = +d.value\n// \t\t\t\t})\n// \t\t\t\tlet layers = stack(nest.entries(data))\n\n// \t\t\t\tx.domain(d3.extent(data, function (d) { return d.date }))\n// \t\t\t\ty.domain([0, d3.max(data, function (d) { return d.y0 + d.y })])\n\n// \t\t\t\tsvg.selectAll(\".layer\")\n// \t\t\t\t\t.data(layers)\n// \t\t\t\t\t.enter().append(\"path\")\n// \t\t\t\t\t.attr(\"class\", \"layer\")\n// \t\t\t\t\t.attr(\"d\", function (d) { return area(d.values) })\n// \t\t\t\t\t.style(\"fill\", function (d, i) { return z(i) })\n\n\n// \t\t\t\tsvg.append(\"g\")\n// \t\t\t\t\t.attr(\"class\", \"x axis\")\n// \t\t\t\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\n// \t\t\t\t\t.call(xAxis)\n\n// \t\t\t\tsvg.append(\"g\")\n// \t\t\t\t\t.attr(\"class\", \"y axis\")\n// \t\t\t\t\t.attr(\"transform\", \"translate(\" + width + \", 0)\")\n// \t\t\t\t\t.call(yAxis.orient(\"right\"))\n\n// \t\t\t\tsvg.append(\"g\")\n// \t\t\t\t\t.attr(\"class\", \"y axis\")\n// \t\t\t\t\t.call(yAxis.orient(\"left\"))\n\n// \t\t\t\tsvg.selectAll(\".layer\")\n// \t\t\t\t\t.attr(\"opacity\", 1)\n// \t\t\t\t\t.on(\"mouseover\", function (d, i) {\n// \t\t\t\t\t\tsvg.selectAll(\".layer\").transition()\n// \t\t\t\t\t\t\t.duration(250)\n// \t\t\t\t\t\t\t.attr(\"opacity\", function (d, j) {\n// \t\t\t\t\t\t\t\treturn j != i ? 0.6 : 1\n// \t\t\t\t\t\t\t})\n// \t\t\t\t\t})\n\n// \t\t\t\t\t.on(\"mousemove\", function (d, i) {\n// \t\t\t\t\t\tmousex = d3.mouse(this)\n// \t\t\t\t\t\tmousex = mousex[0]\n// \t\t\t\t\t\tlet invertedx = x.invert(mousex)\n// \t\t\t\t\t\tinvertedx = invertedx.getMonth() + invertedx.getDate()\n// \t\t\t\t\t\tlet selected = (d.values)\n// \t\t\t\t\t\tfor (let k = 0;k < selected.length;k++) {\n// \t\t\t\t\t\t\tdatearray[k] = selected[k].date\n// \t\t\t\t\t\t\tdatearray[k] = datearray[k].getMonth() + datearray[k].getDate()\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tmousedate = datearray.indexOf(invertedx)\n// \t\t\t\t\t\tpro = d.values[mousedate].value\n\n// \t\t\t\t\t\td3.select(this)\n// \t\t\t\t\t\t\t.classed(\"hover\", true)\n// \t\t\t\t\t\t\t.attr(\"stroke\", strokecolor)\n// \t\t\t\t\t\t\t.attr(\"stroke-width\", \"0.5px\"),\n// \t\t\t\t\t\t\ttooltip.html(\"<p>\" + d.key + \"<br>\" + pro + \"</p>\").style(\"visibility\", \"visible\")\n\n// \t\t\t\t\t})\n// \t\t\t\t\t.on(\"mouseout\", function (d, i) {\n// \t\t\t\t\t\tsvg.selectAll(\".layer\")\n// \t\t\t\t\t\t\t.transition()\n// \t\t\t\t\t\t\t.duration(250)\n// \t\t\t\t\t\t\t.attr(\"opacity\", \"1\")\n// \t\t\t\t\t\td3.select(this)\n// \t\t\t\t\t\t\t.classed(\"hover\", false)\n// \t\t\t\t\t\t\t.attr(\"stroke-width\", \"0px\"), tooltip.html(\"<p>\" + d.key + \"<br>\" + pro + \"</p>\").style(\"visibility\", \"hidden\")\n// \t\t\t\t\t})\n\n// \t\t\t\tlet vertical = d3.select(\".chart\")\n// \t\t\t\t\t.append(\"div\")\n// \t\t\t\t\t.attr(\"class\", \"remove\")\n// \t\t\t\t\t.style(\"position\", \"absolute\")\n// \t\t\t\t\t.style(\"z-index\", \"19\")\n// \t\t\t\t\t.style(\"width\", \"1px\")\n// \t\t\t\t\t.style(\"height\", \"380px\")\n// \t\t\t\t\t.style(\"top\", \"10px\")\n// \t\t\t\t\t.style(\"bottom\", \"30px\")\n// \t\t\t\t\t.style(\"left\", \"0px\")\n// \t\t\t\t\t.style(\"background\", \"#fff\")\n\n// \t\t\t\td3.select(\".chart\")\n// \t\t\t\t\t.on(\"mousemove\", function () {\n// \t\t\t\t\t\tmousex = d3.mouse(this)\n// \t\t\t\t\t\tmousex = mousex[0] + 5\n// \t\t\t\t\t\tvertical.style(\"left\", mousex + \"px\")\n// \t\t\t\t\t})\n// \t\t\t\t\t.on(\"mouseover\", function () {\n// \t\t\t\t\t\tmousex = d3.mouse(this)\n// \t\t\t\t\t\tmousex = mousex[0] + 5\n// \t\t\t\t\t\tvertical.style(\"left\", mousex + \"px\")\n// \t\t\t\t\t})\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \trender({ width, height, padding, }, { }) {\n\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t<svg width={width} height={height} ref={el => this.StreamGraph = el} >\n\n// \t\t\t\t</svg>\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n\n// export default StreamGraph\n"]}